// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import domain "github.com/mochammadshenna/aplikasi-po/model/domain"
import mock "github.com/stretchr/testify/mock"

import sql "database/sql"

// PurchaseOrderRepository is an autogenerated mock type for the PurchaseOrderRepository type
type PurchaseOrderRepository struct {
	mock.Mock
}

// DeletePurchaseOrder provides a mock function with given fields: ctx, tx, poId
func (_m *PurchaseOrderRepository) DeletePurchaseOrder(ctx context.Context, tx *sql.Tx, poId int64) {
	_m.Called(ctx, tx, poId)
}

// FindAll provides a mock function with given fields: ctx, tx
func (_m *PurchaseOrderRepository) FindAll(ctx context.Context, tx *sql.Tx) ([]domain.PurchaseOrder, error) {
	ret := _m.Called(ctx, tx)

	var r0 []domain.PurchaseOrder
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx) []domain.PurchaseOrder); ok {
		r0 = rf(ctx, tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PurchaseOrder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx) error); ok {
		r1 = rf(ctx, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: ctx, tx, poId
func (_m *PurchaseOrderRepository) FindById(ctx context.Context, tx *sql.Tx, poId int) (domain.PurchaseOrder, error) {
	ret := _m.Called(ctx, tx, poId)

	var r0 domain.PurchaseOrder
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) domain.PurchaseOrder); ok {
		r0 = rf(ctx, tx, poId)
	} else {
		r0 = ret.Get(0).(domain.PurchaseOrder)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, int) error); ok {
		r1 = rf(ctx, tx, poId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindFinishingFactory provides a mock function with given fields: ctx, tx, codeId
func (_m *PurchaseOrderRepository) FindFinishingFactory(ctx context.Context, tx *sql.Tx, codeId int) (domain.FinishingFactory, error) {
	ret := _m.Called(ctx, tx, codeId)

	var r0 domain.FinishingFactory
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) domain.FinishingFactory); ok {
		r0 = rf(ctx, tx, codeId)
	} else {
		r0 = ret.Get(0).(domain.FinishingFactory)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, int) error); ok {
		r1 = rf(ctx, tx, codeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProductionFactory provides a mock function with given fields: ctx, tx, codeId
func (_m *PurchaseOrderRepository) FindProductionFactory(ctx context.Context, tx *sql.Tx, codeId int) (domain.ProductionFactory, error) {
	ret := _m.Called(ctx, tx, codeId)

	var r0 domain.ProductionFactory
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) domain.ProductionFactory); ok {
		r0 = rf(ctx, tx, codeId)
	} else {
		r0 = ret.Get(0).(domain.ProductionFactory)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, int) error); ok {
		r1 = rf(ctx, tx, codeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SavePurchaseOrder provides a mock function with given fields: ctx, tx, po
func (_m *PurchaseOrderRepository) SavePurchaseOrder(ctx context.Context, tx *sql.Tx, po domain.PurchaseOrder) (domain.PurchaseOrder, error) {
	ret := _m.Called(ctx, tx, po)

	var r0 domain.PurchaseOrder
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, domain.PurchaseOrder) domain.PurchaseOrder); ok {
		r0 = rf(ctx, tx, po)
	} else {
		r0 = ret.Get(0).(domain.PurchaseOrder)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, domain.PurchaseOrder) error); ok {
		r1 = rf(ctx, tx, po)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePurchaseOrder provides a mock function with given fields: ctx, tx, po, poIds
func (_m *PurchaseOrderRepository) UpdatePurchaseOrder(ctx context.Context, tx *sql.Tx, po domain.PurchaseOrder, poIds int64) (domain.PurchaseOrder, error) {
	ret := _m.Called(ctx, tx, po, poIds)

	var r0 domain.PurchaseOrder
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, domain.PurchaseOrder, int64) domain.PurchaseOrder); ok {
		r0 = rf(ctx, tx, po, poIds)
	} else {
		r0 = ret.Get(0).(domain.PurchaseOrder)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, domain.PurchaseOrder, int64) error); ok {
		r1 = rf(ctx, tx, po, poIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
